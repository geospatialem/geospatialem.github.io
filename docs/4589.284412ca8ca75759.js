"use strict";var $e=Object.defineProperty,Qe=Object.defineProperties,qe=Object.getOwnPropertyDescriptors,We=Object.getOwnPropertySymbols,et=Object.prototype.hasOwnProperty,tt=Object.prototype.propertyIsEnumerable,Ze=(he,F,l)=>F in he?$e(he,F,{enumerable:!0,configurable:!0,writable:!0,value:l}):he[F]=l,Be=(he,F)=>{for(var l in F||(F={}))et.call(F,l)&&Ze(he,l,F[l]);if(We)for(var l of We(F))tt.call(F,l)&&Ze(he,l,F[l]);return he},He=(he,F)=>Qe(he,qe(F));(self.webpackChunksite=self.webpackChunksite||[]).push([[4589],{11915:(he,F,l)=>{l.d(F,{e:()=>N});var te,w,R={exports:{}};te=R,void 0!==(w=function(){function q(n,o,a){a=a||2;var r,s,f,m,L,ce,Oe,ze=o&&o.length,Ae=ze?o[0]*a:n.length,De=D(n,0,Ae,a,!0),de=[];if(!De||De.next===De.prev)return de;if(ze&&(De=function b(n,o,a,r){var s,f,m,L=[];for(s=0,f=o.length;s<f;s++)(m=D(n,o[s]*r,s<f-1?o[s+1]*r:n.length,r,!1))===m.next&&(m.steiner=!0),L.push(be(m));for(L.sort(O),s=0;s<L.length;s++)a=g(a=I(L[s],a),a.next);return a}(n,o,De,a)),n.length>80*a){r=f=n[0],s=m=n[1];for(var Q=a;Q<Ae;Q+=a)(L=n[Q])<r&&(r=L),(ce=n[Q+1])<s&&(s=ce),L>f&&(f=L),ce>m&&(m=ce);Oe=0!==(Oe=Math.max(f-r,m-s))?1/Oe:0}return H(De,de,a,r,s,Oe),de}function D(n,o,a,r,s){var f,m;if(s===Ue(n,o,a,r)>0)for(f=o;f<a;f+=r)m=Pe(f,n[f],n[f+1],m);else for(f=a-r;f>=o;f-=r)m=Pe(f,n[f],n[f+1],m);if(m&&le(m,m.next)){var L=m.next;Se(m),m=L}return m}function g(n,o){if(!n)return n;o||(o=n);var a,r=n;do{if(a=!1,r.steiner||!le(r,r.next)&&0!==ge(r.prev,r,r.next))r=r.next;else{var s=r.prev;if(Se(r),(r=o=s)===r.next)break;a=!0}}while(a||r!==o);return o}function H(n,o,a,r,s,f,m){if(n){!m&&f&&h(n,r,s,f);for(var L,ce,Oe=n;n.prev!==n.next;)if(L=n.prev,ce=n.next,f?ne(n,r,s,f):z(n))o.push(L.i/a),o.push(n.i/a),o.push(ce.i/a),Se(n),n=ce.next,Oe=ce.next;else if((n=ce)===Oe){m?1===m?H(n=ee(g(n),o,a),o,a,r,s,f,2):2===m&&S(n,o,a,r,s,f):H(g(n),o,a,r,s,f,1);break}}}function z(n){var o=n.prev,a=n,r=n.next;if(ge(o,a,r)>=0)return!1;for(var s=n.next.next;s!==n.prev;){if(xe(o.x,o.y,a.x,a.y,r.x,r.y,s.x,s.y)&&ge(s.prev,s,s.next)>=0)return!1;s=s.next}return!0}function ne(n,o,a,r){var s=n.prev,f=n,m=n.next;if(ge(s,f,m)>=0)return!1;for(var Oe=s.x>f.x?s.x>m.x?s.x:m.x:f.x>m.x?f.x:m.x,ze=s.y>f.y?s.y>m.y?s.y:m.y:f.y>m.y?f.y:m.y,Ae=oe(s.x<f.x?s.x<m.x?s.x:m.x:f.x<m.x?f.x:m.x,s.y<f.y?s.y<m.y?s.y:m.y:f.y<m.y?f.y:m.y,o,a,r),De=oe(Oe,ze,o,a,r),de=n.prevZ,Q=n.nextZ;de&&de.z>=Ae&&Q&&Q.z<=De;){if(de!==n.prev&&de!==n.next&&xe(s.x,s.y,f.x,f.y,m.x,m.y,de.x,de.y)&&ge(de.prev,de,de.next)>=0||(de=de.prevZ,Q!==n.prev&&Q!==n.next&&xe(s.x,s.y,f.x,f.y,m.x,m.y,Q.x,Q.y)&&ge(Q.prev,Q,Q.next)>=0))return!1;Q=Q.nextZ}for(;de&&de.z>=Ae;){if(de!==n.prev&&de!==n.next&&xe(s.x,s.y,f.x,f.y,m.x,m.y,de.x,de.y)&&ge(de.prev,de,de.next)>=0)return!1;de=de.prevZ}for(;Q&&Q.z<=De;){if(Q!==n.prev&&Q!==n.next&&xe(s.x,s.y,f.x,f.y,m.x,m.y,Q.x,Q.y)&&ge(Q.prev,Q,Q.next)>=0)return!1;Q=Q.nextZ}return!0}function ee(n,o,a){var r=n;do{var s=r.prev,f=r.next.next;!le(s,f)&&x(s,r,r.next,f)&&K(s,f)&&K(f,s)&&(o.push(s.i/a),o.push(r.i/a),o.push(f.i/a),Se(r),Se(r.next),r=n=f),r=r.next}while(r!==n);return g(r)}function S(n,o,a,r,s,f){var m=n;do{for(var L=m.next.next;L!==m.prev;){if(m.i!==L.i&&Ee(m,L)){var ce=ye(m,L);return m=g(m,m.next),ce=g(ce,ce.next),H(m,o,a,r,s,f),void H(ce,o,a,r,s,f)}L=L.next}m=m.next}while(m!==n)}function O(n,o){return n.x-o.x}function d(n){if(n.next.prev===n)return n;let o=n;for(;;){const a=o.next;if(a.prev===o||a===o||a===n)break;o=a}return o}function I(n,o){var a=function A(n,o){var a,r=o,s=n.x,f=n.y,m=-1/0;do{if(f<=r.y&&f>=r.next.y&&r.next.y!==r.y){var L=r.x+(f-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(L<=s&&L>m){if(m=L,L===s){if(f===r.y)return r;if(f===r.next.y)return r.next}a=r.x<r.next.x?r:r.next}}r=r.next}while(r!==o);if(!a)return null;if(s===m)return a;var ce,Oe=a,ze=a.x,Ae=a.y,De=1/0;r=a;do{s>=r.x&&r.x>=ze&&s!==r.x&&xe(f<Ae?s:m,f,ze,Ae,f<Ae?m:s,f,r.x,r.y)&&(ce=Math.abs(f-r.y)/(s-r.x),K(r,n)&&(ce<De||ce===De&&(r.x>a.x||r.x===a.x&&p(a,r)))&&(a=r,De=ce)),r=r.next}while(r!==Oe);return a}(n,o);if(!a)return o;var r=ye(a,n),s=g(a,a.next);let f=d(r);return g(f,f.next),s=d(s),d(o===a?s:o)}function p(n,o){return ge(n.prev,n,o.prev)<0&&ge(o.next,n,n.next)<0}function h(n,o,a,r){var s=n;do{if(null===s.z&&(s.z=oe(s.x,s.y,o,a,r)),s.prev.next!==s||s.next.prev!==s)return s.prev.next=s,s.next.prev=s,h(n,o,a,r);s.prevZ=s.prev,s.nextZ=s.next,s=s.next}while(s!==n);s.prevZ.nextZ=null,s.prevZ=null,function U(n){var o,a,r,s,f,m,L,ce,Oe=1;do{for(a=n,n=null,f=null,m=0;a;){for(m++,r=a,L=0,o=0;o<Oe&&(L++,r=r.nextZ);o++);for(ce=Oe;L>0||ce>0&&r;)0!==L&&(0===ce||!r||a.z<=r.z)?(s=a,a=a.nextZ,L--):(s=r,r=r.nextZ,ce--),f?f.nextZ=s:n=s,s.prevZ=f,f=s;a=r}f.nextZ=null,Oe*=2}while(m>1)}(s)}function oe(n,o,a,r,s){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-a)*s)|n<<8))|n<<4))|n<<2))|n<<1))|(o=1431655765&((o=858993459&((o=252645135&((o=16711935&((o=32767*(o-r)*s)|o<<8))|o<<4))|o<<2))|o<<1))<<1}function be(n){var o=n,a=n;do{(o.x<a.x||o.x===a.x&&o.y<a.y)&&(a=o),o=o.next}while(o!==n);return a}function xe(n,o,a,r,s,f,m,L){return(s-m)*(o-L)-(n-m)*(f-L)>=0&&(n-m)*(r-L)-(a-m)*(o-L)>=0&&(a-m)*(f-L)-(s-m)*(r-L)>=0}function Ee(n,o){return n.next.i!==o.i&&n.prev.i!==o.i&&!function B(n,o){var a=n;do{if(a.i!==n.i&&a.next.i!==n.i&&a.i!==o.i&&a.next.i!==o.i&&x(a,a.next,n,o))return!0;a=a.next}while(a!==n);return!1}(n,o)&&(K(n,o)&&K(o,n)&&function ie(n,o){var a=n,r=!1,s=(n.x+o.x)/2,f=(n.y+o.y)/2;do{a.y>f!=a.next.y>f&&a.next.y!==a.y&&s<(a.next.x-a.x)*(f-a.y)/(a.next.y-a.y)+a.x&&(r=!r),a=a.next}while(a!==n);return r}(n,o)&&(ge(n.prev,n,o.prev)||ge(n,o.prev,o))||le(n,o)&&ge(n.prev,n,n.next)>0&&ge(o.prev,o,o.next)>0)}function ge(n,o,a){return(o.y-n.y)*(a.x-o.x)-(o.x-n.x)*(a.y-o.y)}function le(n,o){return n.x===o.x&&n.y===o.y}function x(n,o,a,r){var s=j(ge(n,o,a)),f=j(ge(n,o,r)),m=j(ge(a,r,n)),L=j(ge(a,r,o));return s!==f&&m!==L||!(0!==s||!y(n,a,o))||!(0!==f||!y(n,r,o))||!(0!==m||!y(a,n,r))||!(0!==L||!y(a,o,r))}function y(n,o,a){return o.x<=Math.max(n.x,a.x)&&o.x>=Math.min(n.x,a.x)&&o.y<=Math.max(n.y,a.y)&&o.y>=Math.min(n.y,a.y)}function j(n){return n>0?1:n<0?-1:0}function K(n,o){return ge(n.prev,n,n.next)<0?ge(n,o,n.next)>=0&&ge(n,n.prev,o)>=0:ge(n,o,n.prev)<0||ge(n,n.next,o)<0}function ye(n,o){var a=new Ve(n.i,n.x,n.y),r=new Ve(o.i,o.x,o.y),s=n.next,f=o.prev;return n.next=o,o.prev=n,a.next=s,s.prev=a,r.next=a,a.prev=r,f.next=r,r.prev=f,r}function Pe(n,o,a,r){var s=new Ve(n,o,a);return r?(s.next=r.next,s.prev=r,r.next.prev=s,r.next=s):(s.prev=s,s.next=s),s}function Se(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function Ve(n,o,a){this.i=n,this.x=o,this.y=a,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Ue(n,o,a,r){for(var s=0,f=o,m=a-r;f<a;f+=r)s+=(n[m]-n[f])*(n[f+1]+n[m+1]),m=f;return s}return q.deviation=function(n,o,a,r){var s=o&&o.length,m=Math.abs(Ue(n,0,s?o[0]*a:n.length,a));if(s)for(var L=0,ce=o.length;L<ce;L++)m-=Math.abs(Ue(n,o[L]*a,L<ce-1?o[L+1]*a:n.length,a));var Ae=0;for(L=0;L<r.length;L+=3){var De=r[L]*a,de=r[L+1]*a,Q=r[L+2]*a;Ae+=Math.abs((n[De]-n[Q])*(n[de+1]-n[De+1])-(n[De]-n[de])*(n[Q+1]-n[De+1]))}return 0===m&&0===Ae?0:Math.abs((Ae-m)/m)},q.flatten=function(n){for(var o=n[0][0].length,a={vertices:[],holes:[],dimensions:o},r=0,s=0;s<n.length;s++){for(var f=0;f<n[s].length;f++)for(var m=0;m<o;m++)a.vertices.push(n[s][f][m]);s>0&&a.holes.push(r+=n[s-1].length)}return a},q}())&&(te.exports=w);const N=R.exports},67709:(he,F,l)=>{function te(){return new Float32Array(4)}function w(A,p,h,U){const oe=new Float32Array(4);return oe[0]=A,oe[1]=p,oe[2]=h,oe[3]=U,oe}function N(){return te()}function q(){return w(1,1,1,1)}function D(){return w(1,0,0,0)}function g(){return w(0,1,0,0)}function H(){return w(0,0,1,0)}function z(){return w(0,0,0,1)}l.d(F,{f:()=>w});const ne=N(),ee=q(),S=D(),b=g(),O=H(),d=z();Object.freeze({__proto__:null,create:te,clone:function C(A){const p=new Float32Array(4);return p[0]=A[0],p[1]=A[1],p[2]=A[2],p[3]=A[3],p},fromValues:w,createView:function R(A,p){return new Float32Array(A,p,4)},zeros:N,ones:q,unitX:D,unitY:g,unitZ:H,unitW:z,ZEROS:ne,ONES:ee,UNIT_X:S,UNIT_Y:b,UNIT_Z:O,UNIT_W:d})},93396:(he,F,l)=>{l.d(F,{br:()=>H,qE:()=>ne});var te=l(62208),C=l(30217),w=l(49966),R=l(9545),N=l(77692),q=l(57477),D=l(38982);const g={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class H extends q.s{constructor(S=null,b=null,O=null){super(),this._textureInvalidated=!0,this._colormapTextureInvalidated=!0,this._supportsBilinearTexture=!0,this.stencilRef=0,this.coordScale=[1,1],this._symbolizerParameters=null,this.height=null,this.isRendereredSource=!1,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this.rawPixelData=null,this._suspended=!1,this._bandIds=null,this._interpolation=null,this._transformGrid=null,this.width=null,this.x=0,this.y=0,this.source=S,this.transformGrid=b,this.interpolation=O}destroy(){const S=this.getTextures();null==S||S.textures.forEach(b=>b.dispose()),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}get symbolizerParameters(){return this._symbolizerParameters||g}set symbolizerParameters(S){this._symbolizerParameters!==S&&(this._symbolizerParameters=S,this._colormapTextureInvalidated=!0)}get source(){return this._source}set source(S){this._source!==S&&(this._source=S,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}get suspended(){return this._suspended}set suspended(S){this._suspended&&!S&&this.stage&&(this.ready(),this.requestRender()),this._suspended=S}get bandIds(){return this._bandIds}set bandIds(S){this._bandIds=S,this._isBandIdschanged(S)&&this.invalidateTexture()}get interpolation(){return this._interpolation||"nearest"}set interpolation(S){this._interpolation=S,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(S)?9729:9728)}get transformGrid(){return this._transformGrid}set transformGrid(S){this._transformGrid=S,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}_createTransforms(){return{dvs:(0,w.c)()}}setTransform(S){const b=(0,C.b)(this.transforms.dvs),[O,d]=S.toScreenNoRotation([0,0],[this.x,this.y]),I=this.resolution/this.pixelRatio/S.resolution,A=I*this.width,p=I*this.height,h=Math.PI*this.rotation/180;(0,C.c)(b,b,(0,R.f)(O,d)),(0,C.c)(b,b,(0,R.f)(A/2,p/2)),(0,C.r)(b,b,-h),(0,C.c)(b,b,(0,R.f)(-A/2,-p/2)),(0,C.j)(b,b,(0,R.f)(A,p)),(0,C.m)(this.transforms.dvs,S.displayViewMat3,b)}getTextures(){if(!this._rasterTexture)return null;const S=[],b=[];return this._transformGridTexture&&(b.push(this._transformGridTexture),S.push("u_transformGrid")),this._rasterTexture&&(b.push(this._rasterTexture),S.push("u_image")),this._colormapTexture&&(b.push(this._colormapTexture),S.push("u_colormap")),{names:S,textures:b}}onAttach(){this.invalidateTexture()}onDetach(){this.invalidateTexture()}updateTexture({context:S}){var b,O,d;if(!this.stage)return null==(b=this._rasterTexture)||b.dispose(),null==(O=this._transformGridTexture)||O.dispose(),null==(d=this._colormapTexture)||d.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);const I=this._isValidSource(this.source);I&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(S)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(S),this._rasterTexture&&(I?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,D.Br)(S,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}_createOrDestroyRasterTexture(S){var b,O;const d=(0,te.pC)(this.source)?(0,N.qF)(this.source,this.bandIds):null;if(!this._isValidSource(d))return void(this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null));const I=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(I)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(b=S.capabilities.textureFloat)?void 0:b.textureFloatLinear;const A=this._getTextureSamplingMethod(this.interpolation),p=this.isRendereredSource||!(null!=(O=S.capabilities.textureFloat)&&O.textureFloat);this._rasterTexture=(0,D.s9)(S,d,A,p),this._rasterTextureBandIds=this.bandIds?[...this.bandIds]:null}_isBandIdschanged(S){const b=this._rasterTextureBandIds;return!(null==b&&null==S||b&&S&&b.join("")===S.join(""))}_isValidSource(S){var b;return(0,te.pC)(S)&&(null==(b=S.pixels)?void 0:b.length)>0}_getTextureSamplingMethod(S){const{type:b,colormap:O}=this.symbolizerParameters,d="lut"===b||"stretch"===b&&(0,te.pC)(O);return!this._supportsBilinearTexture||d||"bilinear"!==S&&"cubic"!==S?"nearest":"bilinear"}_updateColormapTexture(S){const b=this._colormap,O=this.symbolizerParameters.colormap;return O?b?O.length!==b.length||O.some((d,I)=>d!==b[I])?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,D.iC)(S,O),void(this._colormap=O)):void 0:(this._colormapTexture=(0,D.iC)(S,O),void(this._colormap=O)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}}function ne(ee){return(0,te.pC)(ee.source)}},2361:(he,F,l)=>{l.d(F,{U:()=>Ke});var te=l(18717),C=l(39351),w=l(50392),R=l(62856);const N={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};var g=l(62208),H=l(67709),z=l(64288),ne=l(11176),ee=l(80322),O=l(29384),d=l(13382),I=l(21286),A=l(49966),p=l(83994),Ee=(l(85775),l(8314),l(81653),l(67969),l(20194),l(55086)),ge=l(49353),le=l(39406),x=l(5254);const B=1/65536;var ye=l(9545),Pe=l(47132),Se=l(43289);var n=l(4619);class o extends R.Z{prepareState({context:i},u,c){const T=c&&-1!==c.indexOf("id");i.setBlendingEnabled(!T),i.setBlendFunctionSeparate(1,771,1,771),i.setColorMask(!0,!0,!0,!0),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(514,u.stencilRef,255)}draw(i,u,c){const T=this.getGeometryType();u.commit(i);const v=u.getGeometry(T);(0,g.Wi)(v)||(i.timeline.begin(this.name),i.attributeView.bindTextures(i.context),v.forEachCommand(_=>this.drawGeometry(i,u,_,c)))}_setSharedUniforms(i,u,c){const{displayLevel:T,pixelRatio:v,state:_}=u;i.setUniform1f("u_pixelRatio",v),i.setUniformMatrix3fv("u_dvsMat3",c.transforms.dvs,!1,!0),i.setUniformMatrix3fv("u_displayViewMat3",_.displayViewMat3,!1,!0),i.setUniform1f("u_currentZoom",Math.round(T*C.MI)),i.setUniform1i("u_attributeTextureSize",u.attributeView.size),i.setUniform1i("u_attributeData0",C.iJ),i.setUniform1i("u_attributeData1",C.nM),i.setUniform1i("u_attributeData2",C.Ij),i.setUniform1i("u_attributeData3",C.f2)}_setSizeVVUniforms(i,u,c,T){if(i.vvSizeMinMaxValue&&u.setUniform4fv("u_vvSizeMinMaxValue",c.vvSizeMinMaxValue),i.vvSizeScaleStops&&u.setUniform1f("u_vvSizeScaleStopsValue",c.vvSizeScaleStopsValue),i.vvSizeFieldStops){const v=c.getSizeVVFieldStops(T.key.level);u.setUniform1fv("u_vvSizeFieldStopsValues",v.values),u.setUniform1fv("u_vvSizeFieldStopsSizes",v.sizes)}i.vvSizeUnitValue&&u.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",c.vvSizeUnitValueToPixelsRatio)}_setColorAndOpacityVVUniforms(i,u,c){i.vvColor&&(u.setUniform1fv("u_vvColorValues",c.vvColorValues),u.setUniform4fv("u_vvColors",c.vvColors)),i.vvOpacity&&(u.setUniform1fv("u_vvOpacityValues",c.vvOpacityValues),u.setUniform1fv("u_vvOpacities",c.vvOpacities))}_setRotationVVUniforms(i,u,c){i.vvRotation&&u.setUniform1f("u_vvRotationType","geographic"===c.vvMaterialParameters.vvRotationType?0:1)}}var a=l(18716),de=l(93396),Q=l(38982),ke=l(94487);const Ke={marker:class ze extends o{dispose(){}getGeometryType(){return le.LW.MARKER}drawGeometry(i,u,c,T){const{context:v,painter:_,rendererInfo:E,state:k}=i,M=a.mE.load(c.materialKey),{bufferLayouts:G,attributes:V}=(0,z.cM)(M.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:2,type:5123},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121},{location:8,name:"a_zoomRange",count:2,type:5123}]}),P=_.materialManager.getMaterialProgram(i,M,"materials/icon",V,T);v.useProgram(P),M.textureBinding&&_.textureManager.bindTextures(v,P,M,!0),this._setSharedUniforms(P,i,u),P.setUniformMatrix3fv("u_displayMat3",M.vvRotation?k.displayViewMat3:k.displayMat3),this._setSizeVVUniforms(M,P,E,u),this._setColorAndOpacityVVUniforms(M,P,E),this._setRotationVVUniforms(M,P,E),c.draw(v,G,V)}},line:class ce extends o{dispose(){}getGeometryType(){return le.LW.LINE}drawGeometry(i,u,c,T){const{context:v,painter:_,rendererInfo:E,displayLevel:k}=i,M=a.a.load(c.materialKey),{bufferLayouts:G,attributes:V}=(0,z.cM)(M.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123},{location:8,name:"a_zoomRange",count:2,type:5123}]}),P=_.materialManager.getMaterialProgram(i,M,"materials/line",V,T),X=1/i.pixelRatio;v.useProgram(P),this._setSharedUniforms(P,i,u),M.textureBinding&&_.textureManager.bindTextures(v,P,M),P.setUniform1f("u_zoomFactor",2**(k-u.key.level)/i.pixelRatio),P.setUniform1f("u_blur",0+X),P.setUniform1f("u_antialiasing",X),this._setSizeVVUniforms(M,P,E,u),this._setColorAndOpacityVVUniforms(M,P,E),v.setFaceCullingEnabled(!1),c.draw(v,G,V)}},fill:class s extends o{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([C.kF,C.yP])}dispose(){this._disposeTextures()}getGeometryType(){return le.LW.FILL}drawGeometry(i,u,c,T){const{context:v,painter:_,rendererInfo:E,requiredLevel:k}=i,M=a.dk.load(c.materialKey),{bufferLayouts:G,attributes:V}=(me=>{const i={geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:3,type:5121},{location:2,name:"a_bitset",count:1,type:5121}]};return me.dotDensity?(i.geometry.push({location:3,name:"a_inverseArea",count:1,type:5126}),(0,z.cM)(me.data,i)):(i.geometry.push({location:3,name:"a_color",count:4,type:5121,normalized:!0}),me.simple||i.geometry.push({location:4,name:"a_aux1",count:4,type:5123}),i.geometry.push({location:5,name:"a_aux2",count:4,type:5121},{location:6,name:"a_aux3",count:4,type:5121}),me.simple||i.geometry.push({location:7,name:"a_zoomRange",count:2,type:5123}),(0,z.cM)(me.data,i))})(M),P=_.materialManager.getMaterialProgram(i,M,"materials/fill",V,T);v.useProgram(P),this._setSharedUniforms(P,i,u),P.setUniform2f("u_tileOffset",512*u.key.col,512*u.key.row),M.textureBinding&&(_.textureManager.bindTextures(v,P,M),P.setUniform1f("u_zoomFactor",1/2**(k-u.key.level)/i.pixelRatio));const X=1/i.pixelRatio;if(P.setUniform1f("u_blur",X),P.setUniform1f("u_antialiasing",X),this._setSizeVVUniforms(M,P,E,u),this._setColorAndOpacityVVUniforms(M,P,E),M.dotDensity){const J=C.I_/E.ddDotSize,Ce=J*window.devicePixelRatio*J*window.devicePixelRatio,se=1/2**(k-u.key.level),ve=1/se*(1/se),pe=E.ddDotScale?i.state.scale/E.ddDotScale:1;P.setUniform1f("u_tileZoomFactor",se),P.setUniform1f("u_tileDotsOverArea",Ce/(C.I_*window.devicePixelRatio*C.I_*window.devicePixelRatio)),P.setUniformMatrix4fv("u_dotColors",E.ddColors),P.setUniform4fv("u_isActive",E.ddActiveDots),P.setUniform4fv("u_dotBackgroundColor",E.ddBackgroundColor),P.setUniform1f("u_dotValue",Math.max(1,E.ddDotValue*pe*ve)),this._bindDotDensityTextures(v,P,E,J)}c.draw(v,G,V)}_disposeTextures(){if(this._dotTextures){for(let i=0;i<this._dotTextures.length;i++)this._dotTextures[i].dispose();this._dotTextures=null}}_bindDotDensityTextures(i,u,c,T){const v=this._createDotDensityTextures(i,T,c.ddSeed);u.setUniform1iv("u_dotTextures",this._dotSamplers);for(let _=0;_<v.length;_++)i.bindTexture(v[_],this._dotSamplers[_])}_createDotDensityTextures(i,u,c){if(this._dotTextureSize===u&&this._seed===c||(this._disposeTextures(),this._dotTextureSize=u,this._seed=c),null===this._dotTextures){const T=new n.Z(c);this._dotTextures=[this._allocDotDensityTexture(i,u,T),this._allocDotDensityTexture(i,u,T)]}return this._dotTextures}_allocDotDensityTexture(i,u,c){const T=new Float32Array(u*u*4);for(let v=0;v<T.length;v++)T[v]=c.getFloat();return new Ee.Z(i,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:u,height:u},T)}},text:class De extends o{dispose(){}getGeometryType(){return le.LW.TEXT}drawGeometry(i,u,c,T){const{context:v,painter:_,rendererInfo:E,state:k}=i,M=a.qr.load(c.materialKey),{bufferLayouts:G,attributes:V}=(0,z.cM)(M.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_zoomRange",count:2,type:5123},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}),P=_.materialManager.getMaterialProgram(i,M,"materials/text",V,T);v.useProgram(P),this._setSharedUniforms(P,i,u),_.textureManager.bindTextures(v,P,M),P.setUniformMatrix3fv("u_displayMat3",k.displayMat3),P.setUniformMatrix3fv("u_displayViewMat3",k.displayViewMat3),this._setSizeVVUniforms(M,P,E,u),this._setColorAndOpacityVVUniforms(M,P,E),this._setRotationVVUniforms(M,P,E),P.setUniform1f("u_isHalo",1),c.draw(v,G,V),P.setUniform1f("u_isHalo",0),c.draw(v,G,V)}},label:class m extends o{dispose(){}getGeometryType(){return le.LW.LABEL}drawGeometry(i,u,c,T){const{context:v,painter:_,state:E,rendererInfo:k}=i,M=a.Gq.load(c.materialKey),G=M.mapAligned?1:0;if(!G&&Math.abs(u.key.level-Math.round(100*i.displayLevel)/100)>=1)return;const{bufferLayouts:V,attributes:P}=(0,z.cM)(M.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}),X=_.materialManager.getMaterialProgram(i,M,"materials/label",P,T);i.context.setStencilFunction(514,0,255),v.useProgram(X),this._setSharedUniforms(X,i,u),_.textureManager.bindTextures(v,X,M);const J=1===G?E.displayViewMat3:E.displayMat3;this._setSizeVVUniforms(M,X,k,u),X.setUniform1f("u_mapRotation",Math.floor(E.rotation/360*254)),X.setUniform1f("u_mapAligned",G),X.setUniformMatrix3fv("u_displayMat3",J),X.setUniform1f("u_opacity",1),X.setUniform2fv("u_screenSize",i.state.size),X.setUniform1f("u_isHalo",1),c.draw(v,V,P),X.setUniform1f("u_isHalo",0),c.draw(v,V,P),v.setStencilTestEnabled(!0),v.setBlendingEnabled(!0)}},clip:class b extends R.Z{constructor(){super(...arguments),this._color=(0,H.f)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:i}){i.setStencilTestEnabled(!0),i.setBlendingEnabled(!1),i.setFaceCullingEnabled(!1),i.setColorMask(!1,!1,!1,!1),i.setStencilOp(7680,7680,7681),i.setStencilWriteMask(255),i.setStencilFunction(519,0,255)}draw(i,u){const{context:c,state:T}=i,v=(0,z.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),_=u.getVAO(c,T,v.attributes,v.bufferLayouts);(0,g.Wi)(_.indexBuffer)||(this._program||(this._program=(0,ee.H)(c,ne.O)),c.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",T.displayMat3),c.bindVAO(_),c.drawElements(4,_.indexBuffer.size,5125,0),c.bindVAO())}},stencil:d.Z,bitmap:class D extends R.Z{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:i},u){i.setBlendingEnabled(!0),"additive"===u.blendFunction?i.setBlendFunctionSeparate(1,1,1,1):i.setBlendFunctionSeparate(1,771,1,771),i.setColorMask(!0,!0,!0,!0),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(514,u.stencilRef,255)}draw(i,u){const{context:c,renderingOptions:T,painter:v}=i;if(!u.source)return;i.timeline.begin(this.name),this._quad||(this._quad=new w.Z(c,[0,0,1,0,0,1,1,1]));const _=((me,i,u)=>{if("dynamic"===u.samplingMode){const{state:c}=me,T=i.resolution/i.pixelRatio/c.resolution,v=Math.round(me.pixelRatio)!==me.pixelRatio,_=T>1.05||T<.95;return c.rotation||_||v||i.isSourceScaled||i.rotation?N.bilinear:N.nearest}return N[u.samplingMode]})(i,u,T),E=v.materialManager.getProgram(i,this._desc,_.defines),{coordScale:k,computedOpacity:M,transforms:G}=u;u.setSamplingProfile(_),u.bind(i.context,C.Ic),c.useProgram(E),E.setUniformMatrix3fv("u_dvsMat3",G.dvs),E.setUniform1i("u_texture",C.Ic),E.setUniform2fv("u_coordScale",k),E.setUniform1f("u_opacity",M),this._quad.draw(),i.timeline.end(this.name)}},raster:class je extends R.Z{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:i},u){i.setBlendingEnabled(!0),i.setBlendFunctionSeparate(1,771,1,771),i.setColorMask(!0,!0,!0,!0),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(514,u.stencilRef,255)}draw(i,u){var c;if(!(0,de.qE)(u)||u.suspended)return;i.timeline.begin(this.name);const T=!(null!=(c=i.context.capabilities.textureFloat)&&c.textureFloatLinear);u.updateTexture(i);const v=this.getShaderVariations(u,T),_=i.painter.materialManager.getProgram(i,this._desc[u.symbolizerParameters.type],v);this.drawWithProgram(i.context,_,u),i.timeline.end(this.name)}drawWithProgram(i,u,c,T=1,v=[0,0],_=!1){this._quad||(this._quad=new w.Z(i,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:E,transformGrid:k,width:M,height:G,opacity:V}=c,P=E.type;i.useProgram(u);const X=this.getShaderVariations(c),J=this.getUniformInfos(P,i,u,X),{names:Ce,textures:se}=c.getTextures();(0,Q.RA)(i,u,Ce,se);const ve=(0,Q.zS)(T,v),pe=(0,Q.Tc)(k,[M,G],[c.source.width,c.source.height],V,_);if((0,Q.N9)(u,J,Be(Be({u_coordScale:c.coordScale,u_dvsMat3:c.transforms.dvs},ve),pe)),E.colormap){const{colormap:ae,colormapOffset:_e}=E,$=(0,Q.Ue)(ae,_e);(0,Q.N9)(u,J,$)}if("stretch"===E.type){const ae=(0,Q.xW)(E);(0,Q.N9)(u,J,ae)}else if("hillshade"===E.type){const ae=(0,Q.Fm)(E);(0,Q.N9)(u,J,ae)}this._quad.draw()}getUniformInfos(i,u,c,T){const v=T.length>0?i+"-"+T.join("-"):i;if(this._rendererUniformInfos.has(v))return this._rendererUniformInfos.get(v);const _=(0,Q.v)(u,c);return this._rendererUniformInfos.set(v,_),_}getShaderVariations(i,u=!1){const c=[],{interpolation:T}=i,{type:v,colormap:_}=i.symbolizerParameters;return"cubic"===T?c.push("bicubic"):"bilinear"===T&&"stretch"===v&&null!=_?(c.push("bilinear"),c.push("nnedge")):u&&"bilinear"===T&&c.push("bilinear"),i.isRendereredSource?c.push("noop"):_&&c.push("applyColormap"),i.transformGrid&&c.push("applyProjection"),c}},rasterVF:ke.Z,flow:te.Z,tileInfo:O.Z,vtlBackground:class y extends R.Z{constructor(){super(...arguments),this._color=(0,H.f)(1,0,0,1),this._patternMatrix=(0,A.c)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(i,u){const{context:c,painter:T,styleLayerUID:v}=i;this._loadWGLResources(i);const _=i.displayLevel,E=i.styleLayer,k=E.backgroundMaterial,M=T.vectorTilesMaterialManager,G=E.getPaintValue("background-color",_),V=E.getPaintValue("background-opacity",_),P=E.getPaintValue("background-pattern",_),X=void 0!==P,J=G[3]*V,Ce=1|window.devicePixelRatio,se=i.spriteMosaic;let ve,pe;const ae=Ce>C.a?2:1,_e=i.drawPhase===le.jx.HITTEST,$=this._programOptions;$.id=_e,$.pattern=X;const W=M.getMaterialProgram(c,k,$);if(c.bindVAO(this._vao),c.useProgram(W),X){const Z=se.getMosaicItemPosition(P,!0);if((0,g.pC)(Z)){const{tl:re,br:Y,page:fe}=Z;ve=Y[0]-re[0],pe=Y[1]-re[1];const ue=se.getPageSize(fe);(0,g.pC)(ue)&&(se.bind(c,9729,fe,C.V4),W.setUniform4f("u_tlbr",re[0],re[1],Y[0],Y[1]),W.setUniform2fv("u_mosaicSize",ue),W.setUniform1i("u_texture",C.V4))}W.setUniform1f("u_opacity",V)}else this._color[0]=J*G[0],this._color[1]=J*G[1],this._color[2]=J*G[2],this._color[3]=J,W.setUniform4fv("u_color",this._color);if(W.setUniform1f("u_depth",E.z||0),_e){const Z=(0,x.Au)(v+1);W.setUniform4fv("u_id",Z)}for(const Z of u){if(W.setUniform1f("u_coord_range",Z.rangeX),W.setUniformMatrix3fv("u_dvsMat3",Z.transforms.dvs),X){const re=Math.max(2**(Math.round(_)-Z.key.level),1),Y=ae*Z.width*re,fe=Y/(0,I.fp)(ve),ue=Y/(0,I.fp)(pe);this._patternMatrix[0]=fe,this._patternMatrix[4]=ue,W.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}c.setStencilFunction(514,Z.stencilRef,255),c.drawArrays(5,0,4)}}_loadWGLResources(i){if(this._vao)return;const{context:u,styleLayer:c}=i,T=c.backgroundMaterial,v=new Int8Array([0,0,1,0,0,1,1,1]),_=p.Z.createVertex(u,35044,v),E=new ge.Z(u,T.getAttributeLocations(),T.getLayoutInfo(),{geometry:_});this._vao=E}},vtlFill:class K extends R.Z{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(i,u){const{displayLevel:c,drawPhase:T,renderPass:v,spriteMosaic:_,styleLayerUID:E}=i;let k=!1;for(const $ of u)if($.layerData.has(E)){const W=$.layerData.get(E);if(W.fillIndexCount>0||W.outlineIndexCount>0){k=!0;break}}if(!k)return;const M=i.styleLayer,G=M.getPaintProperty("fill-pattern"),V=void 0!==G,P=V&&G.isDataDriven;let X;if(V&&!P){const $=G.getValue(c);X=_.getMosaicItemPosition($,!0)}const J=!V&&M.getPaintValue("fill-antialias",c);let ve,Ce=!0,se=1;if(!V){const $=M.getPaintProperty("fill-color"),W=M.getPaintProperty("fill-opacity");if(!(null!=$&&$.isDataDriven||null!=W&&W.isDataDriven)){const Z=M.getPaintValue("fill-color",c);se=M.getPaintValue("fill-opacity",c)*Z[3],se>=1&&(Ce=!1)}}if(Ce&&"opaque"===v)return;T===le.jx.HITTEST&&(ve=(0,x.Au)(E+1));const pe=M.getPaintValue("fill-translate",c),ae=M.getPaintValue("fill-translate-anchor",c);(Ce||"translucent"!==v)&&this._drawFill(i,E,M,u,pe,ae,V,X,P,ve),J&&"opaque"!==v&&!(!M.hasDataDrivenOutlineColor&&M.outlineUsesFillColor&&se<1)&&this._drawOutline(i,E,M,u,pe,ae,ve)}_drawFill(i,u,c,T,v,_,E,k,M,G){if(E&&!M&&(0,g.Wi)(k))return;const{context:V,displayLevel:P,state:X,drawPhase:J,painter:Ce,pixelRatio:se,spriteMosaic:ve}=i,pe=c.fillMaterial,ae=Ce.vectorTilesMaterialManager,_e=se>C.a?2:1,$=J===le.jx.HITTEST,W=this._fillProgramOptions;W.id=$,W.pattern=E;const Z=ae.getMaterialProgram(V,pe,W);if(V.useProgram(Z),(0,g.pC)(k)){const{page:Y}=k,fe=ve.getPageSize(Y);(0,g.pC)(fe)&&(ve.bind(V,9729,Y,C.V4),Z.setUniform2fv("u_mosaicSize",fe),Z.setUniform1i("u_texture",C.V4))}Z.setUniformMatrix3fv("u_displayMat3",1===_?X.displayMat3:X.displayViewMat3),Z.setUniform2fv("u_fillTranslation",v),Z.setUniform1f("u_depth",c.z+B),$&&Z.setUniform4fv("u_id",G);let re=-1;for(const Y of T){if(!Y.layerData.has(u))continue;Y.key.level!==re&&(re=Y.key.level,pe.setDataUniforms(Z,P,c,re,ve));const fe=Y.layerData.get(u);if(!fe.fillIndexCount)continue;fe.prepareForRendering(V);const ue=fe.fillVertexArrayObject;if(!(0,g.Wi)(ue)){if(V.bindVAO(ue),Z.setUniformMatrix3fv("u_dvsMat3",Y.transforms.dvs),V.setStencilFunction(514,Y.stencilRef,255),E){const Me=Math.max(2**(Math.round(P)-Y.key.level),1);Z.setUniform1f("u_patternFactor",Y.rangeX/(_e*Y.width*Me))}if(M){const Me=fe.patternMap;if(!Me)continue;for(const[Te,we]of Me){const Re=ve.getPageSize(Te);(0,g.pC)(Re)&&(ve.bind(V,9729,Te,C.V4),Z.setUniform2fv("u_mosaicSize",Re),Z.setUniform1i("u_texture",C.V4),V.drawElements(4,we[1],5125,Uint32Array.BYTES_PER_ELEMENT*we[0]))}}else V.drawElements(4,fe.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*fe.fillIndexStart);Y.triangleCount+=fe.fillIndexCount/3}}}_drawOutline(i,u,c,T,v,_,E){const{context:k,displayLevel:M,state:G,drawPhase:V,painter:P,pixelRatio:X,spriteMosaic:J}=i,Ce=c.outlineMaterial,se=P.vectorTilesMaterialManager,ve=.75/X,pe=V===le.jx.HITTEST,ae=this._outlineProgramOptions;ae.id=pe;const _e=se.getMaterialProgram(k,Ce,ae);k.useProgram(_e),_e.setUniformMatrix3fv("u_displayMat3",1===_?G.displayMat3:G.displayViewMat3),_e.setUniform2fv("u_fillTranslation",v),_e.setUniform1f("u_depth",c.z+B),_e.setUniform1f("u_outline_width",ve),pe&&_e.setUniform4fv("u_id",E);let $=-1;for(const W of T){if(!W.layerData.has(u))continue;W.key.level!==$&&($=W.key.level,Ce.setDataUniforms(_e,M,c,$,J));const Z=W.layerData.get(u);if(Z.prepareForRendering(k),!Z.outlineIndexCount)continue;const re=Z.outlineVertexArrayObject;(0,g.Wi)(re)||(k.bindVAO(re),_e.setUniformMatrix3fv("u_dvsMat3",W.transforms.dvs),k.setStencilFunction(514,W.stencilRef,255),k.drawElements(4,Z.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*Z.outlineIndexStart),W.triangleCount+=Z.outlineIndexCount/3)}}},vtlLine:class ie extends R.Z{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(i,u){const{context:c,displayLevel:T,state:v,drawPhase:_,painter:E,pixelRatio:k,spriteMosaic:M,styleLayerUID:G}=i;if(!u.some(ue=>{var Me,Te;return null!=(Me=null==(Te=ue.layerData.get(G))?void 0:Te.lineIndexCount)&&Me}))return;const V=i.styleLayer,P=V.lineMaterial,X=E.vectorTilesMaterialManager,J=V.getPaintValue("line-translate",T),Ce=V.getPaintValue("line-translate-anchor",T),se=V.getPaintProperty("line-pattern"),ve=void 0!==se,pe=ve&&se.isDataDriven;let ae,_e;if(ve&&!pe){const ue=se.getValue(T);ae=M.getMosaicItemPosition(ue)}let $=!1;if(!ve){const ue=V.getPaintProperty("line-dasharray");if(_e=void 0!==ue,$=_e&&ue.isDataDriven,_e&&!$){const Me=ue.getValue(T),Te=V.getDashKey(Me,V.getLayoutValue("line-cap",T));ae=M.getMosaicItemPosition(Te)}}const W=1/k,Z=_===le.jx.HITTEST,re=this._programOptions;re.id=Z,re.pattern=ve,re.sdf=_e;const Y=X.getMaterialProgram(c,P,re);if(c.useProgram(Y),Y.setUniformMatrix3fv("u_displayViewMat3",v.displayViewMat3),Y.setUniformMatrix3fv("u_displayMat3",1===Ce?v.displayMat3:v.displayViewMat3),Y.setUniform2fv("u_lineTranslation",J),Y.setUniform1f("u_depth",V.z),Y.setUniform1f("u_antialiasing",W),Z){const ue=(0,x.Au)(G+1);Y.setUniform4fv("u_id",ue)}if(ae&&(0,g.pC)(ae)){const{page:ue}=ae,Me=M.getPageSize(ue);(0,g.pC)(Me)&&(M.bind(c,9729,ue,C.V4),Y.setUniform2fv("u_mosaicSize",Me),Y.setUniform1i("u_texture",C.V4))}let fe=-1;for(const ue of u){if(!ue.layerData.has(G))continue;ue.key.level!==fe&&(fe=ue.key.level,P.setDataUniforms(Y,T,V,fe,M)),Y.setUniform1f("u_zoomFactor",2**(T-fe)/k);const Te=ue.layerData.get(G);if(!Te.lineIndexCount)continue;Te.prepareForRendering(c);const we=Te.lineVertexArrayObject;if(!(0,g.Wi)(we)){if(c.bindVAO(we),Y.setUniformMatrix3fv("u_dvsMat3",ue.transforms.dvs),c.setStencilFunction(514,ue.stencilRef,255),pe||$){const Re=Te.patternMap;if(!Re)continue;for(const[Ne,Ie]of Re){const Fe=M.getPageSize(Ne);(0,g.pC)(Fe)&&(M.bind(c,9729,Ne,C.V4),Y.setUniform2fv("u_mosaicSize",Fe),Y.setUniform1i("u_texture",C.V4),c.drawElements(4,Ie[1],5125,Uint32Array.BYTES_PER_ELEMENT*Ie[0]))}}else c.drawElements(4,Te.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*Te.lineIndexStart);ue.triangleCount+=Te.lineIndexCount/3}}}},vtlCircle:class j extends R.Z{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(i,u){const{context:c,displayLevel:T,requiredLevel:v,state:_,drawPhase:E,painter:k,spriteMosaic:M,styleLayerUID:G}=i;if(!u.some($=>{var W,Z;return null!=(W=null==(Z=$.layerData.get(G))?void 0:Z.circleIndexCount)&&W}))return;const V=i.styleLayer,P=V.circleMaterial,X=k.vectorTilesMaterialManager,Ce=V.getPaintValue("circle-translate",T),se=V.getPaintValue("circle-translate-anchor",T),ve=E===le.jx.HITTEST,pe=this._programOptions;pe.id=ve;const ae=X.getMaterialProgram(c,P,pe);c.useProgram(ae),ae.setUniformMatrix3fv("u_displayMat3",1===se?_.displayMat3:_.displayViewMat3),ae.setUniform2fv("u_circleTranslation",Ce),ae.setUniform1f("u_depth",V.z),ae.setUniform1f("u_antialiasingWidth",1.2);let _e=-1;if(ve){const $=(0,x.Au)(G+1);ae.setUniform4fv("u_id",$)}for(const $ of u){if(!$.layerData.has(G))continue;$.key.level!==_e&&(_e=$.key.level,P.setDataUniforms(ae,T,V,_e,M));const W=$.layerData.get(G);if(!W.circleIndexCount)continue;W.prepareForRendering(c);const Z=W.circleVertexArrayObject;(0,g.Wi)(Z)||(c.bindVAO(Z),ae.setUniformMatrix3fv("u_dvsMat3",$.transforms.dvs),v!==$.key.level?c.setStencilFunction(514,$.stencilRef,255):c.setStencilFunction(516,255,255),c.drawElements(4,W.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*W.circleIndexStart),$.triangleCount+=W.circleIndexCount/3)}}},vtlSymbol:class Ue extends R.Z{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,ye.c)()}dispose(){}drawMany(i,u){const{drawPhase:c,styleLayerUID:T}=i,v=i.styleLayer;let _;c===le.jx.HITTEST&&(_=(0,x.Au)(T+1)),this._drawIcons(i,v,u,_),this._drawText(i,v,u,_)}_drawIcons(i,u,c,T){const{context:v,displayLevel:_,drawPhase:E,painter:k,spriteMosaic:M,state:G,styleLayerUID:V}=i,P=u.iconMaterial,X=k.vectorTilesMaterialManager;let J,Ce=!1;for(const fe of c)if(fe.layerData.has(V)&&(J=fe.layerData.get(V),J.iconPerPageElementsMap.size>0)){Ce=!0;break}if(!Ce)return;const se=u.getPaintValue("icon-translate",_),ve=u.getPaintValue("icon-translate-anchor",_);let pe=u.getLayoutValue("icon-rotation-alignment",_);2===pe&&(pe=0===u.getLayoutValue("symbol-placement",_)?1:0);const ae=0===pe,_e=u.getLayoutValue("icon-keep-upright",_)&&ae,$=J.isIconSDF,W=E===le.jx.HITTEST,Z=this._iconProgramOptions;Z.id=W,Z.sdf=$;const re=X.getMaterialProgram(v,P,Z);v.useProgram(re),re.setUniformMatrix3fv("u_displayViewMat3",0===pe?G.displayViewMat3:G.displayMat3),re.setUniformMatrix3fv("u_displayMat3",1===ve?G.displayMat3:G.displayViewMat3),re.setUniform2fv("u_iconTranslation",se),re.setUniform1f("u_depth",u.z),re.setUniform1f("u_mapRotation",(0,Se.s5)(G.rotation)),re.setUniform1f("u_keepUpright",_e?1:0),re.setUniform1f("u_level",10*_),re.setUniform1i("u_texture",C.V4),re.setUniform1f("u_fadeDuration",Pe.nN/1e3),W&&re.setUniform4fv("u_id",T);let Y=-1;for(const fe of c){if(!fe.layerData.has(V)||(fe.key.level!==Y&&(Y=fe.key.level,P.setDataUniforms(re,_,u,Y,M)),J=fe.layerData.get(V),0===J.iconPerPageElementsMap.size))continue;J.prepareForRendering(v),J.updateOpacityInfo();const ue=J.iconVertexArrayObject;if(!(0,g.Wi)(ue)){v.bindVAO(ue),re.setUniformMatrix3fv("u_dvsMat3",fe.transforms.dvs),re.setUniform1f("u_time",(performance.now()-J.lastOpacityUpdate)/1e3);for(const[Me,Te]of J.iconPerPageElementsMap)this._renderIconRange(i,re,Te,Me,fe)}}}_renderIconRange(i,u,c,T,v){const{context:_,spriteMosaic:E}=i;this._spritesTextureSize[0]=E.getWidth(T)/4,this._spritesTextureSize[1]=E.getHeight(T)/4,u.setUniform2fv("u_mosaicSize",this._spritesTextureSize),E.bind(_,9729,T,C.V4),_.setStencilTestEnabled(!0),_.setStencilFunction(516,255,255),_.setStencilWriteMask(0),_.drawElements(4,c[1],5125,Uint32Array.BYTES_PER_ELEMENT*c[0]),v.triangleCount+=c[1]/3}_drawText(i,u,c,T){const{context:v,displayLevel:_,drawPhase:E,glyphMosaic:k,painter:M,pixelRatio:G,spriteMosaic:V,state:P,styleLayerUID:X}=i,J=u.textMaterial,Ce=M.vectorTilesMaterialManager;let se,ve=!1;for(const Le of c)if(Le.layerData.has(X)&&(se=Le.layerData.get(X),se.glyphPerPageElementsMap.size>0)){ve=!0;break}if(!ve)return;const pe=u.getPaintProperty("text-opacity");if(pe&&!pe.isDataDriven&&0===pe.getValue(_))return;const ae=u.getPaintProperty("text-color"),_e=!ae||ae.isDataDriven||ae.getValue(_)[3]>0,$=u.getPaintProperty("text-halo-width"),W=u.getPaintProperty("text-halo-color"),Z=(!$||$.isDataDriven||$.getValue(_)>0)&&(!W||W.isDataDriven||W.getValue(_)[3]>0);if(!_e&&!Z)return;let Y=u.getLayoutValue("text-rotation-alignment",_);2===Y&&(Y=0===u.getLayoutValue("symbol-placement",_)?1:0);const fe=0===Y,ue=u.getLayoutValue("text-keep-upright",_)&&fe,Me=E===le.jx.HITTEST,Te=.8*3/G;this._glyphTextureSize||(this._glyphTextureSize=(0,ye.f)(k.width/4,k.height/4));const we=u.getPaintValue("text-translate",_),Re=u.getPaintValue("text-translate-anchor",_),Ne=this._sdfProgramOptions;Ne.id=Me;const Ie=Ce.getMaterialProgram(v,J,Ne);v.useProgram(Ie),Ie.setUniformMatrix3fv("u_displayViewMat3",0===Y?P.displayViewMat3:P.displayMat3),Ie.setUniformMatrix3fv("u_displayMat3",1===Re?P.displayMat3:P.displayViewMat3),Ie.setUniform2fv("u_textTranslation",we),Ie.setUniform1f("u_depth",u.z+152587890625e-16),Ie.setUniform2fv("u_mosaicSize",this._glyphTextureSize),Ie.setUniform1f("u_mapRotation",(0,Se.s5)(P.rotation)),Ie.setUniform1f("u_keepUpright",ue?1:0),Ie.setUniform1f("u_level",10*_),Ie.setUniform1i("u_texture",C.CU),Ie.setUniform1f("u_antialiasingWidth",Te),Ie.setUniform1f("u_fadeDuration",Pe.nN/1e3),Me&&Ie.setUniform4fv("u_id",T);let Fe=-1;for(const Le of c){if(!Le.layerData.has(X)||(Le.key.level!==Fe&&(Fe=Le.key.level,J.setDataUniforms(Ie,_,u,Fe,V)),se=Le.layerData.get(X),0===se.glyphPerPageElementsMap.size))continue;se.prepareForRendering(v),se.updateOpacityInfo();const Ge=se.textVertexArrayObject;if((0,g.Wi)(Ge))continue;v.bindVAO(Ge),Ie.setUniformMatrix3fv("u_dvsMat3",Le.transforms.dvs),v.setStencilTestEnabled(!0),v.setStencilFunction(516,255,255),v.setStencilWriteMask(0);const Ye=(performance.now()-se.lastOpacityUpdate)/1e3;Ie.setUniform1f("u_time",Ye),se.glyphPerPageElementsMap.forEach((Xe,Je)=>{this._renderGlyphRange(v,Xe,Je,k,Ie,Z,_e,Le)})}}_renderGlyphRange(i,u,c,T,v,_,E,k){T.bind(i,9729,c,C.CU),_&&(v.setUniform1f("u_halo",1),i.drawElements(4,u[1],5125,Uint32Array.BYTES_PER_ELEMENT*u[0]),k.triangleCount+=u[1]/3),E&&(v.setUniform1f("u_halo",0),i.drawElements(4,u[1],5125,Uint32Array.BYTES_PER_ELEMENT*u[0]),k.triangleCount+=u[1]/3)}}}},18717:(he,F,l)=>{l.d(F,{Z:()=>w});var te=l(62208),C=l(62856);class w extends C.Z{dispose(){}prepareState(D){const{context:g}=D;g.setColorMask(!0,!0,!0,!0),g.setStencilFunction(514,0,255)}draw(D,g){const{context:H}=D,{displayData:z}=g;if((0,te.Wi)(z)||("loaded"===z.state.name&&z.prepareForRendering(H,R,N),"attached"!==z.state.name))return;const ne=z.state.resources,ee=D.painter.materialManager.getProgram(D,{vsPath:"raster/flow",fsPath:"raster/flow",attributes:R});H.setFaceCullingEnabled(!1),H.setBlendingEnabled(!0),H.setBlendFunctionSeparate(1,771,1,1),H.useProgram(ee),ee.setUniform1f("u_time",D.time/1e3),ee.setUniform1f("u_fadeDuration",z.flowStyle.renderSettings.fadeDuration),ee.setUniform1f("u_lineSpeed",z.flowStyle.renderSettings.lineSpeed),ee.setUniformMatrix3fv("u_dvsMat3",g.transforms.dvs),ee.setUniformMatrix3fv("u_displayViewMat3",D.state.displayViewMat3),ee.setUniform4f("u_lineColor",z.flowStyle.renderSettings.lineColor[0]*D.globalOpacity,z.flowStyle.renderSettings.lineColor[1]*D.globalOpacity,z.flowStyle.renderSettings.lineColor[2]*D.globalOpacity,z.flowStyle.renderSettings.lineColor[3]*D.globalOpacity),ee.setUniform1f("u_lineHalfWidth",z.flowStyle.renderSettings.lineRenderWidth/2),H.bindVAO(ne.vertexArray),H.drawElements(4,ne.indexBuffer.size,5125,0),z.flowStyle.animated&&g.requestRender()}}const R=new Map;R.set("a_positionAndSide",0),R.set("a_timeInfo",1),R.set("a_extrude",2);const N={geometry:[{name:"a_positionAndSide",count:3,type:5126,offset:0,stride:32,normalized:!1},{name:"a_timeInfo",count:3,type:5126,offset:12,stride:32,normalized:!1},{name:"a_extrude",count:2,type:5126,offset:24,stride:32,normalized:!1}]}},47132:(he,F,l)=>{l.d(F,{PF:()=>C,Ts:()=>w,Bf:()=>te,nN:()=>R});const te=!0,C=32,w=1.5,R=200},43289:(he,F,l)=>{l.d(F,{vX:()=>A,s5:()=>b,k3:()=>O,Or:()=>S});const N=128/Math.PI,ne=1/Math.LN2;function ee(p,h){return(p%=h)>=0?p:p+h}function S(p){return ee(p*N,256)}function b(p){return ee(.7111111111111111*p,256)}function O(p){return Math.log(p)*ne}function A(p,h,U){return p>=h&&p<=U||p>=U&&p<=h}},50392:(he,F,l)=>{l.d(F,{Z:()=>w});var te=l(83994),C=l(49353);class w{constructor(N,q){this.rctx=N,this._vertexBuffer=te.Z.createVertex(N,35044,new Uint16Array(q)),this._vao=new C.Z(N,new Map([["a_position",0]]),{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer}),this._count=q.length/2}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,this._count)}}},44589:(he,F,l)=>{l.d(F,{Z:()=>ge}),l(8314);var C=l(62208),w=l(49966),R=l(2361),N=l(1011),q=l(26584),D=l(63290),g=l(57477),H=l(11915),z=l(67831),ne=l(99770),ee=l(82054),S=l(88071),b=l(5254),O=l(83994);const d=D.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D"),A=(le,x,y,j)=>{let B=0;for(let K=1;K<y;K++)B+=(le[2*(x+K)]-le[2*(x+K-1)])*(le[2*(x+K)+1]+le[2*(x+K-1)+1]);return j?B>0:B<0},p=({coords:le,lengths:x},y)=>{const j=[];for(let B=0,K=0;B<x.length;K+=x[B],B+=1){const ie=K,ye=[];for(;B<x.length-1&&A(le,K+x[B],x[B+1],y);B+=1,K+=x[B])ye.push(K+x[B]-ie);const Pe=le.slice(2*ie,2*(K+x[B])),Se=(0,H.e)(Pe,ye,2);for(const Ve of Se)j.push(Ve+ie)}return j};class h{constructor(x,y,j,B=!1){this._cache={},this.vertices=x,this.indices=y,this.primitiveType=j,this.isMapSpace=B}static fromRect({x,y,width:j,height:B}){return h.fromScreenExtent({xmin:x,ymin:y,xmax:x+j,ymax:y+B})}static fromPath(x){const y=(0,ee.ks)(new S.Z,x.path,!1,!1),j=y.coords,B=new Uint32Array(p(y,!0)),K=new Uint32Array(j.length/2);for(let ie=0;ie<K.length;ie++)K[ie]=(0,b.UJ)(Math.floor(j[2*ie]),Math.floor(j[2*ie+1]));return new h({geometry:K},B,4)}static fromGeometry(x,y){const j=y.geometry.type;switch(j){case"polygon":return h.fromPolygon(x,y.geometry);case"extent":return h.fromMapExtent(x,y.geometry);default:return d.error(new q.Z("mapview-bad-type",`Unable to create a mesh from type ${j}`,y)),h.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(x,y){const j=(0,ee.Uy)(new S.Z,y,!1,!1),B=j.coords,K=new Uint32Array(p(j,!1)),ie=new Uint32Array(B.length/2),ye=(0,ne.a)(),Pe=(0,ne.a)();for(let Se=0;Se<ie.length;Se++)(0,z.s)(ye,B[2*Se],B[2*Se+1]),x.toScreen(Pe,ye),ie[Se]=(0,b.UJ)(Math.floor(Pe[0]),Math.floor(Pe[1]));return new h({geometry:ie},K,4,!0)}static fromScreenExtent({xmin:x,xmax:y,ymin:j,ymax:B}){const K={geometry:new Uint32Array([(0,b.UJ)(x,j),(0,b.UJ)(y,j),(0,b.UJ)(x,B),(0,b.UJ)(x,B),(0,b.UJ)(y,j),(0,b.UJ)(y,B)])},ie=new Uint32Array([0,1,2,3,4,5]);return new h(K,ie,4)}static fromMapExtent(x,y){const[j,B]=x.toScreen([0,0],[y.xmin,y.ymin]),[K,ie]=x.toScreen([0,0],[y.xmax,y.ymax]),ye={geometry:new Uint32Array([(0,b.UJ)(j,B),(0,b.UJ)(K,B),(0,b.UJ)(j,ie),(0,b.UJ)(j,ie),(0,b.UJ)(K,B),(0,b.UJ)(K,ie)])},Pe=new Uint32Array([0,1,2,3,4,5]);return new h(ye,Pe,4)}destroy(){(0,C.pC)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const x in this._cache.vertexBuffers)(0,C.pC)(this._cache.vertexBuffers[x])&&this._cache.vertexBuffers[x].dispose()}get elementType(){return(le=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new q.Z("Cannot get DataType of array")}})()}getIndexBuffer(x,y=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=O.Z.createIndex(x,y,this.indices)),this._cache.indexBuffer}getVertexBuffers(x,y=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((j,B)=>He(Be({},j),{[B]:O.Z.createVertex(x,y,this.vertices[B])}),{})),this._cache.vertexBuffers}}var U=l(49353);const oe=D.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),be=le=>parseFloat(le)/100;class xe extends g.s{constructor(x,y){super(),this._clip=y,this._cache={},this.stage=x,this._handle=y.watch("version",()=>this._invalidate()),this.ready()}static fromClipArea(x,y){return new xe(x,y)}_destroyGL(){(0,C.pC)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,C.pC)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(x,y,j,B){const[K,ie]=y.size;if("geometry"!==this._clip.type&&this._lastWidth===K&&this._lastHeight===ie||(this._lastWidth=K,this._lastHeight=ie,this._destroyGL()),(0,C.Wi)(this._cache.vao)){const ye=this._createMesh(y,this._clip),Pe=ye.getIndexBuffer(x),Se=ye.getVertexBuffers(x);this._cache.mesh=ye,this._cache.vao=new U.Z(x,j,B,Se,Pe)}return this._cache.vao}_createTransforms(){return{dvs:(0,w.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(x,y){const[j,B]=x.size,K="string"==typeof y.left?be(y.left)*j:y.left,ie="string"==typeof y.right?be(y.right)*j:y.right,ye="string"==typeof y.top?be(y.top)*B:y.top,Pe="string"==typeof y.bottom?be(y.bottom)*B:y.bottom,Ve=ye;return{x:K,y:Ve,width:Math.max(j-ie-K,0),height:Math.max(B-Pe-Ve,0)}}_createMesh(x,y){switch(y.type){case"rect":return h.fromRect(this._createScreenRect(x,y));case"path":return h.fromPath(y);case"geometry":return h.fromGeometry(x,y);default:return oe.error(new q.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),h.fromRect({x:0,y:0,width:1,height:1})}}}var Ee=l(39406);class ge extends N.W{constructor(){super(...arguments),this.name=this.constructor.name}set clips(x){this._clips=x,this.children.forEach(y=>y.clips=x),this._updateClippingInfo()}_createTransforms(){return{dvs:(0,w.c)()}}doRender(x){const y=this.createRenderParams(x),{painter:j,globalOpacity:B,profiler:K,drawPhase:ie}=y,ye=ie===Ee.jx.LABEL||ie===Ee.jx.HIGHLIGHT?1:B*this.computedOpacity;K.recordContainerStart(this.name),j.beforeRenderLayer(y,this._clippingInfos?255:0,ye),this.updateTransforms(x.state),this.renderChildren(y),j.compositeLayer(y,ye),K.recordContainerEnd()}renderChildren(x){(0,C.Wi)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(x.painter));for(const y of this.children)y.beforeRender(x);for(const y of this._renderPasses)try{y.render(x)}catch(j){}for(const y of this.children)y.afterRender(x)}createRenderParams(x){return x.requireFBO=this.requiresDedicatedFBO,x}prepareRenderPasses(x){return[x.registerRenderPass({name:"clip",brushes:[R.U.clip],target:()=>this._clippingInfos,drawPhase:Ee.jx.MAP|Ee.jx.LABEL|Ee.jx.LABEL_ALPHA|Ee.jx.DEBUG|Ee.jx.HIGHLIGHT})]}updateTransforms(x){for(const y of this.children)y.setTransform(x)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if((0,C.pC)(this._clippingInfos)&&(this._clippingInfos.forEach(y=>y.destroy()),this._clippingInfos=null),!this.stage)return;const x=this._clips;(0,C.pC)(x)&&x.length&&(this._clippingInfos=x.items.map(y=>xe.fromClipArea(this.stage,y))),this.requestRender()}}},62856:(he,F,l)=>{l.d(F,{Z:()=>te});class te{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(w,R,N){}draw(w,R,N){}drawMany(w,R,N){for(const q of R)this.draw(w,q,N)}}},29384:(he,F,l)=>{l.d(F,{Z:()=>I});var te=l(67709),C=l(83994),g=(l(85775),l(8314),l(81653),l(67969),l(20194),l(80322)),H=l(55086),z=l(49353),ne=l(62856),ee=l(11176),S=l(37977);const b={shaders:{vertexShader:(0,S.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,S.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])};class I extends ne.Z{constructor(){super(...arguments),this._color=(0,te.f)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:p}){p.setBlendingEnabled(!0),p.setBlendFunctionSeparate(1,771,1,771),p.setColorMask(!0,!0,!0,!0),p.setStencilWriteMask(0),p.setStencilTestEnabled(!1)}draw(p,h){const{context:U}=p;if(!h.isReady)return;this._loadWGLResources(U),U.bindVAO(this._outlineVertexArrayObject),U.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",h.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",h.rangeX,h.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),U.drawArrays(3,0,4);const oe=this._getTexture(U,h);oe&&(U.bindVAO(this._tileInfoVertexArrayObject),U.useProgram(this._tileInfoProgram),U.bindTexture(oe,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",h.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",h.rangeX/h.width,h.rangeY/h.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",oe.descriptor.width,oe.descriptor.height),U.drawArrays(5,0,4)),U.bindVAO()}_loadWGLResources(p){if(this._outlineProgram&&this._tileInfoProgram)return;const h=(0,g.H)(p,ee.O),U=(0,g.H)(p,b),oe={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},be=new Int8Array([0,0,1,0,1,1,0,1]),xe=C.Z.createVertex(p,35044,be),Ee=new z.Z(p,ee.O.attributes,oe,{geometry:xe}),ge=new Int8Array([0,0,1,0,0,1,1,1]),le=C.Z.createVertex(p,35044,ge),x=new z.Z(p,b.attributes,oe,{geometry:le});this._outlineProgram=h,this._tileInfoProgram=U,this._outlineVertexArrayObject=Ee,this._tileInfoVertexArrayObject=x}_getTexture(p,h){if(h.texture&&h.triangleCountReportedInDebug===h.triangleCount)return h.texture;h.triangleCountReportedInDebug=h.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const U=h.triangleCount;let oe=h.key.id;h.triangleCount>0&&(oe+=`, ${U}`);const be=this._canvas,xe=be.getContext("2d");return xe.font="24px sans-serif",xe.textAlign="left",xe.textBaseline="top",xe.clearRect(0,0,300,32),U>1e5?(xe.fillStyle="red",xe.fillRect(0,0,300,32),xe.fillStyle="black"):(xe.clearRect(0,0,300,32),xe.fillStyle="blue"),xe.fillText(oe,0,0),h.texture=new H.Z(p,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},be),h.texture}}},13382:(he,F,l)=>{l.d(F,{Z:()=>S});var te=l(67709),C=l(83994),g=(l(85775),l(8314),l(81653),l(67969),l(20194),l(80322)),z=(l(55086),l(49353)),ne=l(62856),ee=l(11176);class S extends ne.Z{constructor(){super(...arguments),this._color=(0,te.f)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:O},d){O.setDepthWriteEnabled(!1),O.setDepthTestEnabled(!1),O.setStencilTestEnabled(!0),O.setBlendingEnabled(!1),O.setColorMask(!1,!1,!1,!1),O.setStencilOp(7680,7680,7681),O.setStencilWriteMask(255),O.setStencilFunctionSeparate(1032,516,d.stencilRef,255)}draw(O,d){const{context:I}=O;this._initialized||this._initialize(I),I.bindVAO(this._solidVertexArrayObject),I.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",d.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[d.rangeX,d.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),I.drawArrays(5,0,4),I.bindVAO()}_initialize(O){if(this._initialized)return!0;const d=(0,g.H)(O,ee.O);if(!d)return!1;const A=new Int8Array([0,0,1,0,0,1,1,1]),p=C.Z.createVertex(O,35044,A),h=new z.Z(O,ee.O.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:p});return this._solidProgram=d,this._solidVertexArrayObject=h,this._initialized=!0,!0}}},94487:(he,F,l)=>{l.d(F,{Z:()=>N});var te=l(62208),C=l(62856);const w=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),R={beaufort_ft:w,beaufort_m:w,beaufort_km:w,beaufort_mi:w,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])};class N extends C.Z{constructor(){super(...arguments),this._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}}}dispose(){}prepareState({context:D},g){D.setBlendingEnabled(!0),D.setBlendFunctionSeparate(1,771,1,771),D.setColorMask(!0,!0,!0,!0),D.setStencilWriteMask(0),D.setStencilTestEnabled(!0),D.setStencilOp(7680,7680,7681),D.setStencilFunction(514,g.stencilRef,255)}draw(D,g){if((0,te.Wi)(g.source)||0===g.source.validPixelCount)return;const{timeline:H}=D;if(H.begin(this.name),g.updateVectorFieldVAO(D),"scalar"===D.renderPass){const z=g.vaoData.scalar;z&&this._drawScalars(D,g,z.vao,z.elementCount)}else{const z=g.vaoData.magdir;z&&this._drawTriangles(D,g,z.vao,z.elementCount)}H.end(this.name)}_drawTriangles(D,g,H,z){const{context:ne,painter:ee}=D,{symbolizerParameters:S}=g,b=S.dataRange?["dataRange"]:[];"geographic"===S.rotationType&&b.push("rotationGeographic");const O=ee.materialManager.getProgram(D,this._desc.magdir,b);ne.useProgram(O);const{coordScale:d,opacity:I,transforms:A}=g;O.setUniform2fv("u_coordScale",d),O.setUniform1f("u_opacity",I),O.setUniformMatrix3fv("u_dvsMat3",A.dvs);const{style:p,dataRange:h,rotation:U,symbolPercentRange:oe}=S;O.setUniform4fv("u_colors",R[p]||R.single_arrow),O.setUniform2fv("u_dataRange",h),O.setUniform1f("u_rotation",U),O.setUniform2fv("u_symbolPercentRange",oe);const be=this._getSymbolSize(D,g);O.setUniform2fv("u_symbolSize",be),ne.bindVAO(H),ne.drawElements(4,z,5125,0)}_drawScalars(D,g,H,z){const{context:ne,painter:ee}=D,{symbolizerParameters:S}=g,b=[];"wind_speed"===S.style?b.push("innerCircle"):S.dataRange&&b.push("dataRange"),"geographic"===S.rotationType&&b.push("rotationGeographic");const O=ee.materialManager.getProgram(D,this._desc.scalar,b);ne.useProgram(O);const{coordScale:d,opacity:I,transforms:A}=g;O.setUniform2fv("u_coordScale",d),O.setUniform1f("u_opacity",I),O.setUniformMatrix3fv("u_dvsMat3",A.dvs);const{dataRange:p,symbolPercentRange:h}=S;O.setUniform2fv("u_dataRange",p),O.setUniform2fv("u_symbolPercentRange",h);const U=this._getSymbolSize(D,g);O.setUniform2fv("u_symbolSize",U),ne.bindVAO(H),ne.drawElements(4,z,5125,0)}_getSymbolSize(D,g){const H=2**(D.displayLevel-g.key.level),{symbolTileSize:z}=g.symbolizerParameters;return[z/(Math.round((g.width-g.offset[0])/z)*z)/H,z/(Math.round((g.height-g.offset[1])/z)*z)/H]}}},11176:(he,F,l)=>{l.d(F,{O:()=>C});var te=l(37977);const C={shaders:{vertexShader:(0,te.w)("background/background.vert"),fragmentShader:(0,te.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},37977:(he,F,l)=>{l.d(F,{w:()=>S}),l(83994),l(85775),l(8314),l(81653),l(67969),l(20194);var D=l(7423);l(55086),l(49353);const z={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef OUTLINED_FILL\nvarying lowp float v_isOutline;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef ID\nout_color = vec4(v_id, 0.0);\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nout_color = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef OUTLINED_FILL\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SIMPLE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_color   = outputs.color;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nv_color   = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nout_color = v_color;\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nvec2 scale = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_scale;\nfloat width = u_pixelRatio * u_zoomFactor * a_width * scale.x;\nfloat height = u_pixelRatio * u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 tileOffset = vec2(u_tileOffset.x * cosA - u_tileOffset.y * sinA, u_tileOffset.x * sinA + u_tileOffset.y * cosA);\ntileOffset = mod(tileOffset, vec2(a_aux2.x, a_aux2.y));\nvec2 symbolOffset = (a_offset - tileOffset - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\nvoid main()\n{\nINIT;\nlowp vec4 color = vec4(0.);\nhighp vec3 pos  = vec3(0.);\n#ifdef OUTLINED_FILL\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(color, pos);\n} else {\ndrawFill(color, pos);\n}\n#else\ndrawFill(color, pos);\n#endif\ngl_Position = vec4(clip(color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\ngl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nelse {\ngl_FragColor = v_opacity * fillPixelColor;\n}\n#else\nlowp vec4 texColor = texture2D(u_texture, v_tex);\ngl_FragColor = v_opacity * texColor * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = vec4(v_id, 0.0);\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\nfloat r = getSize(baseSize.y) / referenceSize;\nbaseSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nvoid main()\n{\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid main()\n{\nINIT;\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},shared:{line:{"common.glsl":"#if !defined(OUTLINED_FILL) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(OUTLINED_FILL) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * lineHalfWidth / line.patternSize.y;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat lineWidth = 2.0 * lineHalfWidth;\nreturn 0.5 * (lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef OUTLINED_FILL\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, 0);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\ngl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = vec4(v_id, 0.0);\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(baseSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifndef OUTSIDE_LABELS_VISIBLE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#endif\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\ngl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"flow.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nuniform float u_time;\nuniform float u_fadeDuration;\nuniform float u_lineSpeed;\nuniform vec4 u_lineColor;\nuniform float u_lineHalfWidth;\nvoid main(void) {\nvec4 color = u_lineColor;\nfloat edgeWidth = min(2.0 * u_lineHalfWidth - 1.0, 1.0);\nfloat edgeStart = (u_lineHalfWidth - edgeWidth) / u_lineHalfWidth;\nif (edgeStart < 0.95) {\nfloat s = step(edgeStart, abs(v_side));\ncolor.a *= (1.0 - s) + s * (1.0 - (abs(v_side) - edgeStart) / (1.0 - edgeStart));\n}\nfloat t = mod(v_timeSeed * (v_totalTime + u_fadeDuration) + u_time * u_lineSpeed, v_totalTime + u_fadeDuration) - v_time;\ncolor.a *= step(0.0, t) * exp(-2.3 * t / u_fadeDuration);\ncolor.rgb *= color.a;\ngl_FragColor = color;\n}","flow.vert":"precision highp float;\nattribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_lineHalfWidth;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvoid main(void) {\nvec2 position = a_positionAndSide.xy;\nfloat side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * u_lineHalfWidth, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_side = side;\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}},ee=new D.Z(function ne(b){let O=z;return b.split("/").forEach(d=>{O&&(O=O[d])}),O});function S(b){return ee.resolveIncludes(b)}},7423:(he,F,l)=>{l.d(F,{Z:()=>te});class te{constructor(w){this.readFile=w}resolveIncludes(w){return this.resolve(w)}resolve(w,R=new Map){if(R.has(w))return R.get(w);const N=this.read(w);if(!N)throw new Error(`cannot find shader file ${w}`);const q=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let D=q.exec(N);const g=[];for(;null!=D;)g.push({path:D[1],start:D.index,length:D[0].length}),D=q.exec(N);let H=0,z="";return g.forEach(ne=>{z+=N.slice(H,ne.start),z+=R.has(ne.path)?"":this.resolve(ne.path,R),H=ne.start+ne.length}),z+=N.slice(H),R.set(w,z),z}read(w){return this.readFile(w)}}},80322:(he,F,l)=>{l.d(F,{H:()=>w,K:()=>C});var te=l(92118);function C(R){let N="";for(const q in R){const D=R[q];if("boolean"==typeof D)D&&(N+=`#define ${q}\n`);else if("number"==typeof D)N+=`#define ${q} ${D.toFixed()}\n`;else if("object"==typeof D){const g=D.options;let H=0;for(const z in g)N+=`#define ${g[z]} ${(H++).toFixed()}\n`;N+=`#define ${q} ${g[D.value]}\n`}}return N}function w(R,N,q,D){q=q||{},D=D||"";const g="function"==typeof N.shaders?N.shaders(q):N.shaders;return new te.$(R,D+g.vertexShader,D+g.fragmentShader,N.attributes)}},38982:(he,F,l)=>{l.d(F,{iC:()=>q,s9:()=>w,Br:()=>N,zS:()=>H,Ue:()=>g,Tc:()=>D,Fm:()=>ne,xW:()=>z,v:()=>ee,RA:()=>b,N9:()=>S}),l(85775);var C=l(55086);function w(d,I,A="nearest",p=!1){var h;const U=!(p&&"u8"===I.pixelType),oe=U?5126:5121,be=null==I.pixels||0===I.pixels.length?null:U?I.getAsRGBAFloat():I.getAsRGBA(),xe=null==(h=d.capabilities.textureFloat)?void 0:h.textureFloatLinear;return new C.Z(d,{width:I.width,height:I.height,target:3553,pixelFormat:6408,internalFormat:"webgl2"===d.webglVersion&&U?34836:6408,samplingMode:!xe||"bilinear"!==A&&"cubic"!==A?9728:9729,dataType:oe,wrapMode:33071,flipped:!1},be)}function N(d,I){const A=4*I.size[0],p=I.size[1],h={width:A,height:p,target:3553,pixelFormat:6408,internalFormat:"webgl2"===d.webglVersion?34836:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},U=new Float32Array(A*p*4);let oe=0;for(let be=0;be<I.coefficients.length;be++)U[oe++]=I.coefficients[be],be%3==2&&(U[oe++]=1);return new C.Z(d,h,U)}function q(d,I){return new C.Z(d,{width:I.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1},I)}function D(d,I,A,p=1,h=!0,U=!1){return{u_flipY:h,u_isFloatTexture:U,u_applyTransform:!!d,u_opacity:p,u_transformSpacing:d?d.spacing:null,u_transformGridSize:d?d.size:null,u_targetImageSize:I,u_srcImageSize:A}}function g(d,I){return{u_colormapOffset:I||0,u_colormapMaxIndex:d?d.length/4-1:null}}function H(d,I){return{u_scale:d,u_offset:I}}function z(d){return{u_bandCount:d.bandCount,u_minOutput:d.outMin,u_maxOutput:d.outMax,u_minCutOff:d.minCutOff,u_maxCutOff:d.maxCutOff,u_factor:d.factor,u_useGamma:d.useGamma,u_gamma:d.gamma,u_gammaCorrection:d.gammaCorrection}}function ne(d){return{u_hillshadeType:d.hillshadeType,u_sinZcosAs:d.sinZcosAs,u_sinZsinAs:d.sinZsinAs,u_cosZs:d.cosZs,u_weights:d.weights,u_factor:d.factor,u_minValue:d.minValue,u_maxValue:d.maxValue}}function ee(d,I){const A=d.gl,p=I.glName,h=A.getProgramParameter(p,A.ACTIVE_UNIFORMS),U=new Map;let oe;for(let be=0;be<h;be++)oe=A.getActiveUniform(p,be),oe&&U.set(oe.name,{location:A.getUniformLocation(p,oe.name),info:oe});return U}function S(d,I,A){Object.keys(A).forEach(p=>{const h=I.get(p)||I.get(p+"[0]");h&&function O(d,I,A,p){if(null===p||null==A)return!1;const{info:h}=p;switch(h.type){case 5126:h.size>1?d.setUniform1fv(I,A):d.setUniform1f(I,A);break;case 35664:d.setUniform2fv(I,A);break;case 35665:d.setUniform3fv(I,A);break;case 35666:d.setUniform4fv(I,A);break;case 35675:d.setUniformMatrix3fv(I,A);break;case 35676:d.setUniformMatrix4fv(I,A);break;case 5124:h.size>1?d.setUniform1iv(I,A):d.setUniform1i(I,A);break;case 35670:d.setUniform1i(I,A?1:0);break;case 35667:case 35671:d.setUniform2iv(I,A);break;case 35668:case 35672:d.setUniform3iv(I,A);break;case 35669:case 35673:d.setUniform4iv(I,A);break;default:return!1}}(d,p,A[p],h)})}function b(d,I,A,p){A.length===p.length&&(p.some(h=>null==h)||A.some(h=>null==h)||A.forEach((h,U)=>{I.setUniform1i(h,U),d.bindTexture(p[U],U)}))}}}]);